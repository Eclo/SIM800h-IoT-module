{
  "api/Eclo.nF.SIM800H.MessageDeleteOption.html": {
    "href": "api/Eclo.nF.SIM800H.MessageDeleteOption.html",
    "title": "Enum MessageDeleteOption | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum MessageDeleteOption Available options to delete text messages Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum MessageDeleteOption Fields Name Description All Delete all messages Inbox Delete all received messages Read Delete all read messages Sent Delete all sent messages Unread Delete all unread messages Unsent Delete all unsent messages"
  },
  "api/Eclo.nF.SIM800H.HttpWebRequest.html": {
    "href": "api/Eclo.nF.SIM800H.HttpWebRequest.html",
    "title": "Class HttpWebRequest | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpWebRequest Provides an HTTP-specific implementation of the WebRequest class. Inheritance System.Object WebRequest HttpWebRequest Implements System.IDisposable Inherited Members WebRequest.UserAgent WebRequest.Create(Uri) WebRequest.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpWebRequest : WebRequest, IDisposable Remarks This class does the main work of the request: it collects the header information from the user, exposes the Stream for outgoing entity data, and processes the incoming request. Implementation follows .NETMF System.Net.HttpWebRequest Constructors HttpWebRequest(Uri) Declaration public HttpWebRequest(Uri uri) Parameters Type Name Description Uri uri Properties AllowWriteStreamBuffering No effect in this platform. It's only implemented for compatibility with .NETMF. Declaration public bool AllowWriteStreamBuffering { get; set; } Property Value Type Description System.Boolean ContentLength No effect in this platform. It's only implemented for compatibility with .NETMF. Declaration public long ContentLength { get; set; } Property Value Type Description System.Int64 ContentType Gets or sets the type of the entity body (the value of the content type). Declaration public string ContentType { get; set; } Property Value Type Description System.String The value of the Content-type HTTP header. The default value is null . Remarks Setting to null clears the content-type. Data Data to be sent in the request. Only valid for POST requests. Declaration public string Data { get; set; } Property Value Type Description System.String Headers A collection of HTTP headers stored as name/value pairs. Declaration public WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the name/value pairs that make up the headers for the HTTP request. Remarks The following header values are set through properties on the HttpWebRequest class: Accept, Connection, Content-Length, Content-Type, Expect, Range, Referrer, Transfer-Encoding, and User-Agent. Trying to set these header values by using WebHeaderCollection. Add(String, String) () will raise an exception. Date and Host are set internally. KeepAlive No effect in this platform. It's only implemented for compatibility with .NETMF. Declaration public bool KeepAlive { get; set; } Property Value Type Description System.Boolean Method Gets or sets the HTTP method of this request. Supported methods: POST, GET, HEAD and DELETE. Declaration public string Method { get; set; } Property Value Type Description System.String The request method to use to contact the Internet resource. The default value is GET. Remarks This method represents the initial origin verb, which is unchanged and unaffected by redirects. RequestUri Gets the original Uniform Resource Identifier (URI) of the request. Declaration public Uri RequestUri { get; } Property Value Type Description Uri A Uri that contains the URI of the Internet resource passed to the WebRequest. Create(Uri) method. Remarks The URI object was created by the constructor and is always non-null. The URI object will always be the base URI, because automatic re-directs aren't supported. Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides WebRequest.Dispose(Boolean) GetRequestStream() Implemented here for compatibility with .NETMF System.Net.HttpWebRequest. *** WARNING: DO NOT explicitly dispose the stream otherwise the request will be executed empty *** Declaration public InMemoryRandomAccessStream GetRequestStream() Returns Type Description InMemoryRandomAccessStream A Stream to use to write request data. Remarks Used for POST requests. GetResponse() Declaration public HttpWebResponse GetResponse() Returns Type Description HttpWebResponse Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.HttpActionResult.html": {
    "href": "api/Eclo.nF.SIM800H.HttpActionResult.html",
    "title": "Class HttpActionResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpActionResult Class with the result of an HttpAction request. Inheritance System.Object HttpActionResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpActionResult Constructors HttpActionResult(HttpAction, Int32, Int32) Declaration public HttpActionResult(HttpAction action, int statusCode, int dataLenght) Parameters Type Name Description HttpAction action System.Int32 statusCode System.Int32 dataLenght Properties Action Declaration public HttpAction Action { get; } Property Value Type Description HttpAction DataLenght Declaration public int DataLenght { get; } Property Value Type Description System.Int32 StatusCode Declaration public int StatusCode { get; } Property Value Type Description System.Int32"
  },
  "api/Eclo.nF.SIM800H.GprsProvider.html": {
    "href": "api/Eclo.nF.SIM800H.GprsProvider.html",
    "title": "Class GprsProvider | Eclo SIM800H IoT driver documentation",
    "keywords": "Class GprsProvider Class with methods to perform GPRS related actions. Inheritance System.Object GprsProvider Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class GprsProvider : IDisposable Methods CheckBearerStatus(BearerProfile) Queries a GPRS bearer profile to check if it's opened. On successful execution context open status is updated in the respective GprsNNNBearerIsOpen property Declaration public AtCommandResult CheckBearerStatus(BearerProfile profile) Parameters Type Name Description BearerProfile profile The bearer profile. Returns Type Description AtCommandResult CheckConnectionStatus(Int32) Queries current status of a specific GPRS connection Declaration public ConnectionStatus CheckConnectionStatus(int connection) Parameters Type Name Description System.Int32 connection Returns Type Description ConnectionStatus CloseBearer(BearerProfile) Closes a GPRS context bearer profile Declaration public AtCommandResult CloseBearer(BearerProfile profile) Parameters Type Name Description BearerProfile profile The bearer profile. Returns Type Description AtCommandResult DetachGprs() Detach GPRS Declaration public AtCommandResult DetachGprs() Returns Type Description AtCommandResult Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() OpenBearerAsync(BearerProfile, AsyncCallback, Object) Starts an asynchronous operation to open a GPRS bearer. A GPRS bearer is required for HTTP client, SNTP, MMS and location requests. Declaration public OpenBearerAsyncResult OpenBearerAsync(BearerProfile profile, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description BearerProfile profile The bearer profile System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the OpenGprsContextAsyncResult, optional Returns Type Description OpenBearerAsyncResult The OpenBearerAsyncResult OpenBearerAsync(AsyncCallback, Object) Declaration [Obsolete(\"This method is obsolete and will be removed in a future version. Replace with OpenBearerAsync specifying a BearerProfile.\")] public OpenBearerAsyncResult OpenBearerAsync(AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.AsyncCallback asyncCallback System.Object asyncState Returns Type Description OpenBearerAsyncResult OpenGprsConnectionAsync(AsyncCallback, Object) Starts an asynchronous operation to open a GPRS connection. A GPRS connection is required to use sockets, IP apps and MMS. Declaration public ConnectGprsAsyncResult OpenGprsConnectionAsync(AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the OpenGprsContextAsyncResult, optional Returns Type Description ConnectGprsAsyncResult The ConnectGprsAsyncResult Events GprsIpAppsBearerStateChanged Event raised when the status of the IP bearer for IP apps changes. Declaration public event GprsProvider.GprsIpAppsBearerStateChangedHandler GprsIpAppsBearerStateChanged Event Type Type Description GprsProvider.GprsIpAppsBearerStateChangedHandler GprsSocketsBearerStateChanged Event raised when the status of the sockets bearer changes. Declaration public event GprsProvider.GprsSocketsBearerStateChangedHandler GprsSocketsBearerStateChanged Event Type Type Description GprsProvider.GprsSocketsBearerStateChangedHandler MmsBearerStateChanged Event raised when the status of the MMS changes. Declaration public event GprsProvider.MmsBearerStateChangedHandler MmsBearerStateChanged Event Type Type Description GprsProvider.MmsBearerStateChangedHandler Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.ConnectGprsAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.ConnectGprsAsyncResult.html",
    "title": "Class ConnectGprsAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class ConnectGprsAsyncResult An asynchronous result returning the result of a request to open a GPRS connection Inheritance System.Object DeviceAsyncResult ConnectGprsAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class ConnectGprsAsyncResult : DeviceAsyncResult, IAsyncResult Fields Result Result of GPRS connection Declaration public ConnectGprsResult Result Field Value Type Description ConnectGprsResult Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public ConnectGprsResult End() Returns Type Description ConnectGprsResult Returns the result of the request to open bearer context Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Eclo SIM800H IoT driver documentation",
    "keywords": ""
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Eclo SIM800H IoT driver documentation",
    "keywords": ""
  },
  "api/Eclo.nF.SIM800H.WarningCondition.html": {
    "href": "api/Eclo.nF.SIM800H.WarningCondition.html",
    "title": "Enum WarningCondition | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum WarningCondition Warning conditions Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum WarningCondition Fields Name Description OverVoltagePowerDown Over Voltage Power Down OverVoltageWarning Over Voltage warning TemperatureWarning Module temperature is not normal UnderVoltagePowerDown Under Voltage Power Down UnderVoltageWarning Under Voltage warning"
  },
  "api/Eclo.nF.SIM800H.SIM800H.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.html",
    "title": "Class SIM800H | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SIM800H Class with methods, properties and events to work with a SIM800H module. Inheritance System.Object SIM800H Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class SIM800H : IDisposable Fields AccessPointConfiguration GPRS access point configuration (APN) note This APN configuration is used in HTTP calls, SNTP and other IP applications. For MMS set MmsAccessPointConfiguration . Declaration public static AccessPointConfiguration AccessPointConfiguration Field Value Type Description AccessPointConfiguration MmsAccessPointConfiguration Access point configuration (APN) for MMS note This APN configuration is used exclusively for MMS send. For other IP applications set AccessPointConfiguration . Declaration public static AccessPointConfiguration MmsAccessPointConfiguration Field Value Type Description AccessPointConfiguration Properties FileStorage FileStorage property with all the methods required to access the internal file storage Declaration public static FileStorage FileStorage { get; set; } Property Value Type Description FileStorage GprsIpAppsBearerIsOpen Status of IP apps bearer in profile 1 of GPRS context Declaration public static bool GprsIpAppsBearerIsOpen { get; } Property Value Type Description System.Boolean GprsMmsBearerIsOpen Status of MMS bearer in profile 2 of GPRS context Declaration public static bool GprsMmsBearerIsOpen { get; } Property Value Type Description System.Boolean GprsNetworkRegistration GPRS network registration state of module Declaration public static NetworkRegistrationState GprsNetworkRegistration { get; } Property Value Type Description NetworkRegistrationState GprsProvider GprsProvider property with all the methods required to use the GPRS features Declaration public static GprsProvider GprsProvider { get; set; } Property Value Type Description GprsProvider GprsSocketsBearerIsOpen Status of sockets bearer in profile 0 of GPRS context Declaration public static bool GprsSocketsBearerIsOpen { get; } Property Value Type Description System.Boolean GsmNetworkRegistration GSM network registration state of module Declaration public static NetworkRegistrationState GsmNetworkRegistration { get; } Property Value Type Description NetworkRegistrationState HttpClient HttpClient property with all the methods required to perform HTTP requests Declaration public static HttpClient HttpClient { get; set; } Property Value Type Description HttpClient IMEI Retrieves the device's IMEI Declaration public static string IMEI { get; } Property Value Type Description System.String IMEI of the device IpAddress IP address of module Declaration public static string IpAddress { get; } Property Value Type Description System.String MaxSockets Maximum number of sockets supported. SIM800H module supports up to 6. When setting this properties, any existing socket will be closed and becomes unavailable. Declaration public static int MaxSockets { get; set; } Property Value Type Description System.Int32 MmsClient MmsClient property with all the methods required to use the MMS (Multimedia Messaging Service) client Declaration public static MmsClient MmsClient { get; set; } Property Value Type Description MmsClient MmsConfiguration MMS center configuration Declaration public static MmsConfiguration MmsConfiguration { get; set; } Property Value Type Description MmsConfiguration ModelIdentification Module model identification Declaration public string ModelIdentification { get; } Property Value Type Description System.String PowerStatus Power status of SIM800H device Declaration public static PowerStatus PowerStatus { get; } Property Value Type Description PowerStatus SerialInterfaceBaudRate Retrieves baud rate for serial interface Declaration public int SerialInterfaceBaudRate { get; } Property Value Type Description System.Int32 An integer with the serial port baud rate (-1 when this command couldn't be executed) SIMCardStatus Get SIM card status Declaration public SimCardStatus SIMCardStatus { get; } Property Value Type Description SimCardStatus SIMCardStatus SmsProvider SmsProvider property with all the methods required to send SMS (text) messages Declaration public static SmsProvider SmsProvider { get; set; } Property Value Type Description SmsProvider SmsStatusReport Enable Sms status report Declaration public bool SmsStatusReport { set; } Property Value Type Description System.Boolean SntpClient SntpClient property with all the methods required to user the SNTP (Simple Network Time Protocol) client Declaration public static SntpClient SntpClient { get; set; } Property Value Type Description SntpClient SoftwareRelease Module software release Declaration public static string SoftwareRelease { get; } Property Value Type Description System.String SupplyVoltage Retrieves supply voltage. Declaration public static ushort SupplyVoltage { get; } Property Value Type Description System.UInt16 Supply voltage in mV Methods Configure(Devices.Gpio.GpioPin, ref SerialDevice) Configure hardware interface with the device. Declaration public static void Configure(Devices.Gpio.GpioPin powerKey, ref SerialDevice serialPort) Parameters Type Name Description Windows.Devices.Gpio.GpioPin powerKey The I/O signal that will be used to control the device's power key SerialDevice serialPort The serial port that will be used to comunicate with the device Dispose() Declaration public void Dispose() Finalize() Declaration protected void Finalize() GetDateTime() Retrieves date time from device's clock. For correct date time the clock must be set either programatically or using SNTP service Declaration public static DateTime GetDateTime() Returns Type Description System.DateTime Date time from device's clock GetTimeAndLocation(Boolean) Retrieves time and optionally location of the device, as reported by the time and location service. Needs to have GPRS connection active. Declaration public static LocationAndTime GetTimeAndLocation(bool getLocation = true) Parameters Type Name Description System.Boolean getLocation True to return also the location of the device. Returns Type Description LocationAndTime The device's time and location OnCallReady() Raises the CallReady event. Declaration protected static void OnCallReady() OnGprsNetworkRegistrationChanged(NetworkRegistrationState) Raises the GprsNetworkRegistrationChanged event. Declaration protected virtual void OnGprsNetworkRegistrationChanged(NetworkRegistrationState networkState) Parameters Type Name Description NetworkRegistrationState networkState Current state of the GPRS network registration OnGsmNetworkRegistrationChanged(NetworkRegistrationState) Raises the GsmNetworkRegistrationChanged event. Declaration protected virtual void OnGsmNetworkRegistrationChanged(NetworkRegistrationState networkState) Parameters Type Name Description NetworkRegistrationState networkState Current state of the GSM network registration OnPowerStatusChanged(PowerStatus) Raises the PowerStatusChanged event. Declaration protected virtual void OnPowerStatusChanged(PowerStatus powerStatus) Parameters Type Name Description PowerStatus powerStatus new power status of the device OnSimCardStatusChanged(SimCardStatus) Raises the SimCardStatusChanged event. Declaration protected virtual void OnSimCardStatusChanged(SimCardStatus simCardStatus) Parameters Type Name Description SimCardStatus simCardStatus new status of the SIM card OnSmsReady() Raises the SmsReady event. Declaration protected virtual void OnSmsReady() OnSmsSentReferenceReceived(Int32) Raises the SmsSentReferenceReceived event. Declaration protected virtual void OnSmsSentReferenceReceived(int reference) Parameters Type Name Description System.Int32 reference reference of the Sms sent OnWarningConditionTriggered(WarningCondition) Raises the WarningConditionTriggered event. Declaration protected virtual void OnWarningConditionTriggered(WarningCondition warningCondition) Parameters Type Name Description WarningCondition warningCondition The warning condition that was triggered PowerOff() Powers off the SIM800H module Declaration public static void PowerOff() PowerOnAsync(AsyncCallback, Object) Starts an asynchronous operation to run the power on sequence Declaration public static PowerOnAsyncResult PowerOnAsync(AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the ReadMessageAsyncResult, optional Returns Type Description PowerOnAsyncResult The PowerSatus result of the power on sequence RetrieveOperator() Retrieves the operator wich the device is registered to Declaration public static string RetrieveOperator() Returns Type Description System.String The operator which the device is registered to RetrievePinState() Retrieves the pin state of the SIM Declaration public static PinState RetrievePinState() Returns Type Description PinState An instance of PinState with the current state of the PIN RetrieveSignalStrength() Get the signal strength (RSSI) of the cellular network Declaration public static SignalStrength RetrieveSignalStrength() Returns Type Description SignalStrength An instance of SignalStrength which contains a representation of the strength of the network signal SetPhoneFuncionality(PhoneFuncionality, Boolean) Set phone funcionality Declaration public static AtCommandResult SetPhoneFuncionality(PhoneFuncionality mode, bool resetBeforeChange = false) Parameters Type Name Description PhoneFuncionality mode See phone funcionality options System.Boolean resetBeforeChange True to reset device before changes are made effective Returns Type Description AtCommandResult returns ATCommandResult Events CallReady Event raised when the device reports that is ready for calls. Declaration public static event SIM800H.CallReadyHandler CallReady Event Type Type Description SIM800H.CallReadyHandler GprsNetworkRegistrationChanged Event raised when the status of the GPRS registration changes. Declaration public static event SIM800H.GprsNetworkRegistrationChangedHandler GprsNetworkRegistrationChanged Event Type Type Description SIM800H.GprsNetworkRegistrationChangedHandler GsmNetworkRegistrationChanged Event raised when the status of the GSM network registration changes. Declaration public static event SIM800H.GsmNetworkRegistrationChangedHandler GsmNetworkRegistrationChanged Event Type Type Description SIM800H.GsmNetworkRegistrationChangedHandler PowerStatusChanged Event raised when the power status of the device changes. Declaration public static event SIM800H.PowerStatusChangedHandler PowerStatusChanged Event Type Type Description SIM800H.PowerStatusChangedHandler SimCardStatusChanged Event raised when the status of the SIM card changes. Declaration public static event SIM800H.SimCardStatusChangedHandler SimCardStatusChanged Event Type Type Description SIM800H.SimCardStatusChangedHandler SmsReady Event raised when the device reports that the SMS features are ready. Declaration public static event SIM800H.SmsReadyHandler SmsReady Event Type Type Description SIM800H.SmsReadyHandler SmsSentReferenceReceived Event raised when the device receives a new SMS message. Declaration public static event SIM800H.SmsSentReferenceReceivedHandler SmsSentReferenceReceived Event Type Type Description SIM800H.SmsSentReferenceReceivedHandler WarningConditionTriggered Event raised when there is a warning condition reported by the device. Declaration public static event SIM800H.WarningConditionTriggeredHandler WarningConditionTriggered Event Type Type Description SIM800H.WarningConditionTriggeredHandler Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.SIM800H.WarningConditionTriggeredHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.WarningConditionTriggeredHandler.html",
    "title": "Delegate SIM800H.WarningConditionTriggeredHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.WarningConditionTriggeredHandler Represents the delegate used for the WarningConditionTriggered event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void WarningConditionTriggeredHandler(WarningCondition warningCondition); Parameters Type Name Description WarningCondition warningCondition The warning condition that was triggered"
  },
  "api/Eclo.nF.SIM800H.SendTextMessageAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.SendTextMessageAsyncResult.html",
    "title": "Class SendTextMessageAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SendTextMessageAsyncResult An asynchronous result object returning the result of an attempt to send an SMS Inheritance System.Object DeviceAsyncResult SendTextMessageAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class SendTextMessageAsyncResult : DeviceAsyncResult, IAsyncResult Constructors SendTextMessageAsyncResult(String, String, AsyncCallback, Object) Declaration public SendTextMessageAsyncResult(string destinationNumber, string message, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.String destinationNumber System.String message System.AsyncCallback asyncCallback System.Object asyncState Fields Reference Reference of the sent SMS Declaration public int Reference Field Value Type Description System.Int32 Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public int End() Returns Type Description System.Int32 Returns the sent SMS index Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.PinState.html": {
    "href": "api/Eclo.nF.SIM800H.PinState.html",
    "title": "Enum PinState | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum PinState Possible states of the SIM card Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum PinState Fields Name Description Error Error retrieving PIN status NotPresent SIM is not present PH_PIN SIM is waiting for phone to SIM card (anti-theft) PH_PUK SIM is waiting for phone to SIM PUK (anti theft) PIN SIM is locked waiting for the PIN PIN2 SIM is waiting for second PIN PUK SIM is locked waiting for the PUK PUK2 SIM is waiting for second PUK Ready SIM is unlocked and ready to be used."
  },
  "api/Eclo.nF.SIM800H.NetworkRegistrationState.html": {
    "href": "api/Eclo.nF.SIM800H.NetworkRegistrationState.html",
    "title": "Enum NetworkRegistrationState | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum NetworkRegistrationState Possible states of network registration Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum NetworkRegistrationState Fields Name Description Error Error NotSearching Module couldn't find a network Registered Module is registered to a network RegistrationDenied Module tried to register to a network, but it was denied Roaming Roaming Searching Module is searching for a network Unknown Unknown"
  },
  "api/Eclo.nF.SIM800H.MessageState.html": {
    "href": "api/Eclo.nF.SIM800H.MessageState.html",
    "title": "Enum MessageState | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum MessageState Possible states for a text message Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum MessageState Fields Name Description All All messages Error Error retrieving message ReceivedRead Messages that were received but not yet read ReceivedUnread Messages that were received and read StoredSent Messages that were created and sent StoredUnsent Messages that were created but not yet sent"
  },
  "api/Eclo.nF.SIM800H.HttpWebRequestAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.HttpWebRequestAsyncResult.html",
    "title": "Class HttpWebRequestAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpWebRequestAsyncResult An asynchronous result object returning the result of an HTTP Request Inheritance System.Object DeviceAsyncResult HttpWebRequestAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpWebRequestAsyncResult : DeviceAsyncResult, IAsyncResult Constructors HttpWebRequestAsyncResult(HttpWebRequest, Boolean, Boolean, Boolean, Int32, AsyncCallback, Object) Declaration public HttpWebRequestAsyncResult(HttpWebRequest request, bool readResponseData = false, bool readResponseHeaders = false, bool closeConnectionOnCompletion = true, int readTimeout = 5000, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description HttpWebRequest request System.Boolean readResponseData System.Boolean readResponseHeaders System.Boolean closeConnectionOnCompletion System.Int32 readTimeout System.AsyncCallback asyncCallback System.Object asyncState Fields HttpResponse The device HTTP response object after the call is completed. RequestSuccessful property is false if request couldn't be completed for any reason Declaration public HttpWebResponse HttpResponse Field Value Type Description HttpWebResponse Properties _closeConnectionOnCompletion Declaration public bool _closeConnectionOnCompletion { get; set; } Property Value Type Description System.Boolean Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public HttpWebResponse End() Returns Type Description HttpWebResponse Returns the SMS Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.HttpClient.HttpActionReceivedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.HttpClient.HttpActionReceivedHandler.html",
    "title": "Delegate HttpClient.HttpActionReceivedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate HttpClient.HttpActionReceivedHandler Represents the delegate used for the HttpActionReceived event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void HttpActionReceivedHandler(HttpActionResult actionResult); Parameters Type Name Description HttpActionResult actionResult HTTP action result of the request"
  },
  "api/Eclo.nF.SIM800H.OpenBearerAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.OpenBearerAsyncResult.html",
    "title": "Class OpenBearerAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class OpenBearerAsyncResult An asynchronous result object returning the result of a request to open a bearer in GPRS context Inheritance System.Object DeviceAsyncResult OpenBearerAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class OpenBearerAsyncResult : DeviceAsyncResult, IAsyncResult Fields Result Result of open bearer context Declaration public OpenBearerResult Result Field Value Type Description OpenBearerResult Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public OpenBearerResult End() Returns Type Description OpenBearerResult Returns the result of the request to open bearer context Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.MmsClient.html": {
    "href": "api/Eclo.nF.SIM800H.MmsClient.html",
    "title": "Class MmsClient | Eclo SIM800H IoT driver documentation",
    "keywords": "Class MmsClient Class with methods to perform MMS related actions. Inheritance System.Object MmsClient Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class MmsClient : IDisposable Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() SendMmsMessageAsync(String, MmsMessage, Boolean, AsyncCallback, Object) Starts an asynchronous operation to send an MMS message. Declaration public SendMmsMessageAsyncResult SendMmsMessageAsync(string destination, MmsMessage msg, bool closeConnectionOnCompletion = true, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.String destination Destination phone number or email. Numbers and normal chars only, no spaces, punctuation or other special chars accepted. Phone number MUST ALWAYS include the country code preceded with international prefix '+' or '00'. Email in valid format. MmsMessage msg MMS message object System.Boolean closeConnectionOnCompletion Option to close the connection when the MMS message is sent, optional with true as default System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the SendMmsMessageAsyncResult, optional. Returns Type Description SendMmsMessageAsyncResult The SendMmsMessageAsyncResult with a Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.LocationAndTime.html": {
    "href": "api/Eclo.nF.SIM800H.LocationAndTime.html",
    "title": "Class LocationAndTime | Eclo SIM800H IoT driver documentation",
    "keywords": "Class LocationAndTime Class with information about location and time. Inheritance System.Object LocationAndTime Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class LocationAndTime Properties DateTime Current date time as provided from location application service Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime ErrorCode Error code for the request. 404 - not found 408 - request timeout 601 - network error 602 - no memory 603 - DNS error 604 - Stack busy 65535 - Other error Declaration public int ErrorCode { get; set; } Property Value Type Description System.Int32 Latitude Current latitude as provided from location application service. Value is degrees. Declaration public double Latitude { get; } Property Value Type Description System.Double Longitude Current longitude as provided from location application service. Value is degrees. Declaration public double Longitude { get; } Property Value Type Description System.Double"
  },
  "api/Eclo.nF.SIM800H.HttpKnownHeaderNames.html": {
    "href": "api/Eclo.nF.SIM800H.HttpKnownHeaderNames.html",
    "title": "Class HttpKnownHeaderNames | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpKnownHeaderNames Contains known HTTP header names. Inheritance System.Object HttpKnownHeaderNames Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpKnownHeaderNames Fields Authorization The Authorization HTTP header. Declaration public const string Authorization = \"Authorization\" Field Value Type Description System.String"
  },
  "api/Eclo.nF.SIM800H.HttpAction.html": {
    "href": "api/Eclo.nF.SIM800H.HttpAction.html",
    "title": "Enum HttpAction | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum HttpAction HTTP action method Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum HttpAction Fields Name Description DELETE GET HEAD NOT_SET POST"
  },
  "api/Eclo.nF.SIM800H.GprsProvider.MmsBearerStateChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.GprsProvider.MmsBearerStateChangedHandler.html",
    "title": "Delegate GprsProvider.MmsBearerStateChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate GprsProvider.MmsBearerStateChangedHandler Represents the delegate used for the MmsBearerStateChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void MmsBearerStateChangedHandler(bool isOpen); Parameters Type Name Description System.Boolean isOpen Current state of the MMS bearer"
  },
  "api/Eclo.nF.SIM800H.ConnectGprsResult.html": {
    "href": "api/Eclo.nF.SIM800H.ConnectGprsResult.html",
    "title": "Enum ConnectGprsResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum ConnectGprsResult Outcome of request to open GPRS connection Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum ConnectGprsResult Fields Name Description AlreadyOpen GPRS connection already open DeviceIsOff Device is off Error Unspecified error when trying to open GPRS connection Failed Failed to open bearer context after all attempts NotRegisteredAtGprsNetwork Device is not registered at GPRS network NotRegisteredAtGsmNetwork Device is not registered at GSM network Open GPRS connection open"
  },
  "api/Eclo.nF.SIM800H.TextMessage.html": {
    "href": "api/Eclo.nF.SIM800H.TextMessage.html",
    "title": "Class TextMessage | Eclo SIM800H IoT driver documentation",
    "keywords": "Class TextMessage Class with text message (SMS) properties and content. Inheritance System.Object TextMessage Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class TextMessage Constructors TextMessage() Instantiates a new SMS with empty number, and content, marks it as unsent and with the current time as the timestamp. Declaration public TextMessage() TextMessage(String, String, MessageState, DateTime) Instantiates a new SMS message with the given parameters. Declaration public TextMessage(string number, string text, MessageState state, DateTime timestamp) Parameters Type Name Description System.String number Number System.String text Message content MessageState state MessageState System.DateTime timestamp Time stamp of message Fields Status Status of the message Declaration public MessageState Status Field Value Type Description MessageState TelephoneNumber Number Declaration public string TelephoneNumber Field Value Type Description System.String Text Message content Declaration public string Text Field Value Type Description System.String Timestamp Date and time when the message was sent or received Declaration public DateTime Timestamp Field Value Type Description System.DateTime Properties Index Index of the message in the SIM card's memory Declaration public int Index { get; } Property Value Type Description System.Int32"
  },
  "api/Eclo.nF.SIM800H.SyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.SyncResult.html",
    "title": "Enum SyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum SyncResult Result of SNTP sync request Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum SyncResult Fields Name Description ConnectionError Connection error DeviceIsOff Device is off DnsError DNS resolution error Error Unspecified error NetworkError Network error NotRegisteredAtGprsNetwork Device is not registered at GPRS network NotRegisteredAtGsmNetwork Device is not registered at GSM network NotSet value not set ServerResponseError Server response error ServerResponseTimeout Server Response timeout SyncSuccessful Network synchronization successful"
  },
  "api/Eclo.nF.SIM800H.SendMmsMessageAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.SendMmsMessageAsyncResult.html",
    "title": "Class SendMmsMessageAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SendMmsMessageAsyncResult An asynchronous result object returning the outcome of an attempt to send a MMS message. Inheritance System.Object DeviceAsyncResult SendMmsMessageAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class SendMmsMessageAsyncResult : DeviceAsyncResult, IAsyncResult Constructors SendMmsMessageAsyncResult(String, MmsMessage, Boolean, AsyncCallback, Object) Declaration public SendMmsMessageAsyncResult(string destination, MmsMessage message, bool closeConnectionOnCompletion = true, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.String destination MmsMessage message System.Boolean closeConnectionOnCompletion System.AsyncCallback asyncCallback System.Object asyncState Fields Result Result of the MMS send operation. Result property is false if request couldn't be completed for any reason. See error code for details. Declaration public bool Result Field Value Type Description System.Boolean Properties ErrorCode Error code of the send request. Declaration public int ErrorCode { get; } Property Value Type Description System.Int32 Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public bool End() Returns Type Description System.Boolean Returns the result of the request. Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.PhoneFuncionality.html": {
    "href": "api/Eclo.nF.SIM800H.PhoneFuncionality.html",
    "title": "Enum PhoneFuncionality | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum PhoneFuncionality Phone Funcionality Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum PhoneFuncionality Fields Name Description FligthMode Flight mode: disable tx and rx RF circuits Full Full funcionality (default) Minimum Minimum funcionality: minimum current consumption, RF and SIM are off"
  },
  "api/Eclo.nF.SIM800H.MmsConfiguration.html": {
    "href": "api/Eclo.nF.SIM800H.MmsConfiguration.html",
    "title": "Class MmsConfiguration | Eclo SIM800H IoT driver documentation",
    "keywords": "Class MmsConfiguration Configuration of MMS center (MMSC). Inheritance System.Object MmsConfiguration Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class MmsConfiguration Constructors MmsConfiguration() Empty MMS center configuration. Declaration public MmsConfiguration() MmsConfiguration(String, String, Int32) MMS center configuration. Declaration public MmsConfiguration(string mmsc, string proxy, int proxyPort) Parameters Type Name Description System.String mmsc MMS center URL note URL without \"http://\" and/or port number. System.String proxy MMS Proxy note Must be an IP address. URLs are not accepted. System.Int32 proxyPort MMS Proxy port. Properties MMSC MMS center URL. Can't be null. note URL without \"http://\" and/or port number. Declaration public string MMSC { get; } Property Value Type Description System.String Port Declaration [Obsolete(\"Obsolete. Replace with ProxyPort property.\")] public int Port { get; set; } Property Value Type Description System.Int32 Proxy Proxy. Empty if not used. note Must be an IP address. URLs are not accepted. Declaration public string Proxy { get; } Property Value Type Description System.String ProxyPort Proxy port. Default is 80. Declaration public int ProxyPort { get; } Property Value Type Description System.Int32 Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators Equality(MmsConfiguration, MmsConfiguration) Declaration public static bool operator ==(MmsConfiguration value1, MmsConfiguration value2) Parameters Type Name Description MmsConfiguration value1 MmsConfiguration value2 Returns Type Description System.Boolean Inequality(MmsConfiguration, MmsConfiguration) Declaration public static bool operator !=(MmsConfiguration value1, MmsConfiguration value2) Parameters Type Name Description MmsConfiguration value1 MmsConfiguration value2 Returns Type Description System.Boolean"
  },
  "api/Eclo.nF.SIM800H.ListTextMessagesAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.ListTextMessagesAsyncResult.html",
    "title": "Class ListTextMessagesAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class ListTextMessagesAsyncResult An asynchronous result object returning a list of text message indexes Inheritance System.Object DeviceAsyncResult ListTextMessagesAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class ListTextMessagesAsyncResult : DeviceAsyncResult, IAsyncResult Constructors ListTextMessagesAsyncResult(MessageState, AsyncCallback, Object) Declaration public ListTextMessagesAsyncResult(MessageState state, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description MessageState state System.AsyncCallback asyncCallback System.Object asyncState Fields SMSList A System.Byte list with the indexes of the messages that match the MessageState queried. Returns an empty list if none couldn't be read or match the criteria Declaration public ArrayList SMSList Field Value Type Description ArrayList Methods End() Finishes the asynchronous processing and throws an exception if one was generated. Returns a System.Byte list with the indexes of the messages that match the MessageState queried. Blocks until the asynchronous processing has completed Declaration public ArrayList End() Returns Type Description ArrayList Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.HttpStatusCode.html": {
    "href": "api/Eclo.nF.SIM800H.HttpStatusCode.html",
    "title": "Enum HttpStatusCode | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum HttpStatusCode Contains the values of status codes defined for HTTP. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum HttpStatusCode Remarks Status codes indicate categories, as follows: 1xx -- Informational. 2xx -- Successful. 3xx -- Redirection. 4xx -- Client Error. 5xx -- Server Error. Fields Name Description Accepted Equivalent to HTTP status 202. Indicates that the request has been accepted for further processing. BadRequest Equivalent to HTTP status 400. Indicates that the request could not be understood by the server. BadRequest is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code. Continue Equivalent to HTTP status 100. Indicates that the client can continue with its request. Created Equivalent to HTTP status 201. Indicates that the request resulted in a new resource created before the response was sent. Forbidden Equivalent to HTTP status 403. Indicates that the server refuses to fulfill the request. HttpVersionNotSupported Equivalent to HTTP status 505. Indicates that the requested HTTP version is not supported by the server. InternalServerError Equivalent to HTTP status 500. Indicates that a generic error has occurred on the server. MethodNotAllowed Equivalent to HTTP status 405. Indicates that the request method (POST or GET) is not allowed on the requested resource. Moved Equivalent to HTTP status 301. Indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. Moved is a synonym for MovedPermanently . MovedPermanently Equivalent to HTTP status 301. Indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. MovedPermanently is a synonym for Moved . NoContent Equivalent to HTTP status 204. Indicates that the request has been successfully processed and that the response is intentionally blank. NotAcceptable Equivalent to HTTP status 406. Indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource. NotFound Equivalent to HTTP status 404. Indicates that the requested resource does not exist on the server. NotImplemented Equivalent to HTTP status 501. Indicates that the server does not support the requested function. NotModified Equivalent to HTTP status 304. Indicates that the client's cached copy is up-to-date. The contents of the resource are not transferred. OK Equivalent to HTTP status 200. Indicates that the request succeeded and that the requested information is in the response. This is the most common status code to receive. PartialContent Equivalent to HTTP status 206. Indicates that the response is a partial response as requested by a GET request that includes a byte range. PreconditionFailed Equivalent to HTTP status 412. Indicates that a condition set for this request failed, and the request cannot be carried out. Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since. Redirect Equivalent to HTTP status 302. Indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. RequestEntityTooLarge Equivalent to HTTP status 413. Indicates that the request is too large for the server to process. RequestTimeout Equivalent to HTTP status 408. Indicates that the client did not send a request within the time the server was expecting the request. RequestUriTooLong Equivalent to HTTP status 414. Indicates that the URI is too long. ServiceUnavailable Equivalent to HTTP status 503. Indicates that the server is temporarily unavailable, usually due to high load or maintenance. TemporaryRedirect Equivalent to HTTP status 307. Indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method. Unauthorized Equivalent to HTTP status 401. Indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication. UnsupportedMediaType Equivalent to HTTP status 415. Indicates that the request is an unsupported type."
  },
  "api/Eclo.nF.SIM800H.GprsSocket.html": {
    "href": "api/Eclo.nF.SIM800H.GprsSocket.html",
    "title": "Class GprsSocket | Eclo SIM800H IoT driver documentation",
    "keywords": "Class GprsSocket GPRS socket instance. Inheritance System.Object GprsSocket Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class GprsSocket : IDisposable Constructors GprsSocket(ProtocolType, Boolean) Class with GPRS socket methods and properties Declaration public GprsSocket(ProtocolType protocolType, bool isSslSocket = false) Parameters Type Name Description ProtocolType protocolType Protocol type of the socket System.Boolean isSslSocket True if socket is SLL. Default is false (not SSL). Properties Status Connection status of a GPRS socket Declaration public ConnectionStatus Status { get; } Property Value Type Description ConnectionStatus Methods Close() Close GPRS socket connection Declaration public void Close() Connect(String, Int32) Connects a GPRS socket to the specified URL and port. This operation requires that a GPRS connection has been open previous to call this otherwise an exception will throw. Declaration public void Connect(string remoteURL, int port) Parameters Type Name Description System.String remoteURL URL where to connect System.Int32 port Port number where to connect Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() OnSocketClosed(GprsSocket) Raises the OnSocketClosed(GprsSocket) event. Declaration protected virtual void OnSocketClosed(GprsSocket sender) Parameters Type Name Description GprsSocket sender The object that raised the event. OnSocketConnected(GprsSocket) Raises the OnSocketConnected(GprsSocket) event. Declaration protected virtual void OnSocketConnected(GprsSocket sender) Parameters Type Name Description GprsSocket sender The object that raised the event. Receive(Byte[], Int32, Int32) Declaration public int Receive(byte[] buffer, int offset, int size) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 size Returns Type Description System.Int32 Send(Byte[]) Declaration public int Send(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Returns Type Description System.Int32 Send(Byte[], Int32, Int32) Declaration public int Send(byte[] buffer, int offset, int size) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 size Returns Type Description System.Int32 Events DataReceived Event raised when the module emits a network registration message. Declaration public event GprsSocket.DataReceivedHandler DataReceived Event Type Type Description GprsSocket.DataReceivedHandler SocketClosed Event raised when the module emits a network registration message. Declaration public event GprsSocket.SocketClosedHandler SocketClosed Event Type Type Description GprsSocket.SocketClosedHandler SocketConnected Event raised when the module emits a network registration message. Declaration public event GprsSocket.SocketConnectedHandler SocketConnected Event Type Type Description GprsSocket.SocketConnectedHandler Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.GprsProvider.GprsIpAppsBearerStateChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.GprsProvider.GprsIpAppsBearerStateChangedHandler.html",
    "title": "Delegate GprsProvider.GprsIpAppsBearerStateChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate GprsProvider.GprsIpAppsBearerStateChangedHandler Represents the delegate used for the GprsIpAppsBearerStateChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void GprsIpAppsBearerStateChangedHandler(bool isOpen); Parameters Type Name Description System.Boolean isOpen Current state of the IP apps bearer"
  },
  "api/Eclo.nF.SIM800H.SIM800H.SmsReadyHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.SmsReadyHandler.html",
    "title": "Delegate SIM800H.SmsReadyHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.SmsReadyHandler Represents the delegate used for the SmsReady event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SmsReadyHandler();"
  },
  "api/Eclo.nF.SIM800H.SIM800H.SimCardStatusChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.SimCardStatusChangedHandler.html",
    "title": "Delegate SIM800H.SimCardStatusChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.SimCardStatusChangedHandler Represents the delegate used for the SimCardStatusChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SimCardStatusChangedHandler(SimCardStatus simCardStatus); Parameters Type Name Description SimCardStatus simCardStatus new SIM card status of the device"
  },
  "api/Eclo.nF.SIM800H.GprsProvider.GprsSocketsBearerStateChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.GprsProvider.GprsSocketsBearerStateChangedHandler.html",
    "title": "Delegate GprsProvider.GprsSocketsBearerStateChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate GprsProvider.GprsSocketsBearerStateChangedHandler Represents the delegate used for the GprsSocketsBearerStateChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void GprsSocketsBearerStateChangedHandler(bool isOpen); Parameters Type Name Description System.Boolean isOpen Current state of the sockets bearer"
  },
  "api/Eclo.nF.SIM800H.DeviceAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.DeviceAsyncResult.html",
    "title": "Class DeviceAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class DeviceAsyncResult An asynchronous result object Inheritance System.Object DeviceAsyncResult ConnectGprsAsyncResult HttpWebRequestAsyncResult ListTextMessagesAsyncResult OpenBearerAsyncResult PowerOnAsyncResult SendMmsMessageAsyncResult SendTextMessageAsyncResult SyncNetworkTimeAsyncResult Implements System.IAsyncResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class DeviceAsyncResult : IAsyncResult Constructors DeviceAsyncResult(AsyncCallback, Object) Creates an AsyncResult Declaration public DeviceAsyncResult(AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against this AsyncResult, optional Properties AsyncState The state object stored against this AsyncResult Declaration public object AsyncState { get; } Property Value Type Description System.Object AsyncWaitHandle The WaitHandle for this AsyncResult Declaration public WaitHandle AsyncWaitHandle { get; } Property Value Type Description WaitHandle CompletedSynchronously Returns true if this AsyncResult has been completed synchronously Declaration public bool CompletedSynchronously { get; } Property Value Type Description System.Boolean IsCompleted Returns true if this AsyncResult has been completed Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean Methods Complete(Exception, Boolean) Called when the asynchronous processing has been completed Declaration protected bool Complete(Exception exception = null, bool completedSynchronously = false) Parameters Type Name Description System.Exception exception The exception generated while processing, optional System.Boolean completedSynchronously True if the processing was completed synchronously, optional, defaults to false Returns Type Description System.Boolean Returns true if this is the first time this method has been called on this AsyncResult End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public void End() Process() The method used to perform the asynchronous processing Declaration public virtual void Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.SocketError.html": {
    "href": "api/Eclo.nF.SIM800H.SocketError.html",
    "title": "Enum SocketError | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum SocketError Defines socket error constants. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum SocketError Remarks Implementation follows .NETMF System.Net.Sockets.SocketError Fields Name Description ProtocolNotSupported SocketError The socket has an error. Success The operation completed successfully. TooManyOpenSockets"
  },
  "api/Eclo.nF.SIM800H.SntpClient.SntpReplyReceivedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SntpClient.SntpReplyReceivedHandler.html",
    "title": "Delegate SntpClient.SntpReplyReceivedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SntpClient.SntpReplyReceivedHandler Represents the delegate used for the SntpReplyReceived event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SntpReplyReceivedHandler(SyncResult syncResult); Parameters Type Name Description SyncResult syncResult Result code of SNTP request"
  },
  "api/Eclo.nF.SIM800H.SIM800H.PowerStatusChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.PowerStatusChangedHandler.html",
    "title": "Delegate SIM800H.PowerStatusChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.PowerStatusChangedHandler Represents the delegate used for the PowerStatusChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void PowerStatusChangedHandler(PowerStatus powerStatus); Parameters Type Name Description PowerStatus powerStatus new power status of the device"
  },
  "api/Eclo.nF.SIM800H.ProtocolType.html": {
    "href": "api/Eclo.nF.SIM800H.ProtocolType.html",
    "title": "Enum ProtocolType | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum ProtocolType Specifies the protocols that the GprsSocket class supports. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum ProtocolType Remarks Implementation follows .NETMF System.Net.Sockets.ProtocolType Fields Name Description Tcp Transmission control protocol Udp User datagram protocol"
  },
  "api/Eclo.nF.SIM800H.HttpClient.html": {
    "href": "api/Eclo.nF.SIM800H.HttpClient.html",
    "title": "Class HttpClient | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpClient Class with methods to perform HTTP client requests. Inheritance System.Object HttpClient Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpClient : IDisposable Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() PerformHttpWebRequestAsync(HttpWebRequest, Boolean, Boolean, Boolean, Int32, AsyncCallback, Object) Performs an asynchronous HttpWebrequest Declaration public HttpWebRequestAsyncResult PerformHttpWebRequestAsync(HttpWebRequest request, bool readResponseData = false, bool readHeaders = false, bool closeConnectionOnCompletion = true, int readTimeout = 5000, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description HttpWebRequest request The HttpWebRequest request to be performed System.Boolean readResponseData Option to read the response data if any, optional with false as default System.Boolean readHeaders Option to read the response headers, if any, optional with false as default System.Boolean closeConnectionOnCompletion Option to close the connection when HTTP request is completed, optional with true as default System.Int32 readTimeout Timeout (in milliseconds) to complete a read operation. This is used in HTTP GET operations and when read response headers option is enabled. The default is 5s. System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the ReadSMSAsyncResult, optional Returns Type Description HttpWebRequestAsyncResult The IMEIAsyncResult SaveHttpContext() Saves HTTP application context. When system is rebooted the parameters will be loaded automatically Declaration public AtCommandResult SaveHttpContext() Returns Type Description AtCommandResult Events HttpActionReceived Event raised when the module receives an HTTP action prompt. Declaration public event HttpClient.HttpActionReceivedHandler HttpActionReceived Event Type Type Description HttpClient.HttpActionReceivedHandler Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.GprsSocket.SocketClosedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.GprsSocket.SocketClosedHandler.html",
    "title": "Delegate GprsSocket.SocketClosedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate GprsSocket.SocketClosedHandler Represents the delegate used for the OnSocketClosed(GprsSocket) event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SocketClosedHandler(GprsSocket sender); Parameters Type Name Description GprsSocket sender The object that raised the event."
  },
  "api/Eclo.nF.SIM800H.ConnectionStatus.html": {
    "href": "api/Eclo.nF.SIM800H.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum ConnectionStatus Connection status of GPRS socket. See SIM800H documentation. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum ConnectionStatus Fields Name Description Closed Closing Connected Connecting Initial RemoteClosing Unknown"
  },
  "api/Eclo.nF.SIM800H.SmsProvider.html": {
    "href": "api/Eclo.nF.SIM800H.SmsProvider.html",
    "title": "Class SmsProvider | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SmsProvider SMS client class with methods to send and read SMSs. Inheritance System.Object SmsProvider Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class SmsProvider : IDisposable Methods DeleteTextMessage(Int32) Delete a text message Declaration public AtCommandResult DeleteTextMessage(int position) Parameters Type Name Description System.Int32 position Position in memory where the message is stored Returns Type Description AtCommandResult DeleteTextMessages(MessageDeleteOption) Deletes text messages according to delete option Declaration public AtCommandResult DeleteTextMessages(MessageDeleteOption deleteOption) Parameters Type Name Description MessageDeleteOption deleteOption option to delete messages that match a criteria or are at specific storage Returns Type Description AtCommandResult Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() ListTextMessagesAsync(MessageState, AsyncCallback, Object) Starts an asynchronous operation to get a list with indexes of text messages that match the MessageState criteria Declaration public ListTextMessagesAsyncResult ListTextMessagesAsync(MessageState state, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description MessageState state MessageState of the SMS that will be queried System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the ReadMessageListAsyncResult, optional Returns Type Description ListTextMessagesAsyncResult The IMEIAsyncResult ReadTextMessage(Int32, Boolean) Requests to read the text message in the specified position. Declaration public TextMessage ReadTextMessage(int memoryPosition, bool markAsRead = true) Parameters Type Name Description System.Int32 memoryPosition Position in memory where the message is stored System.Boolean markAsRead Whether unread messages will be marked as read Returns Type Description TextMessage SendTextMessageAsync(String, String, AsyncCallback, Object) Starts an asynchronous operation to send a text message Declaration public SendTextMessageAsyncResult SendTextMessageAsync(string destinationNumber, string text, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.String destinationNumber Destination phone number. Numbers only, no spaces, punctuation or other chars accepted. Number MUST ALWAYS include the country code preceded with international prefix '+' or '00'. System.String text Message text System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the SendMessageAsyncResult, optional. Returns Type Description SendTextMessageAsyncResult The IMEIAsyncResult Events SmsReceived Event raised when the module receives a new SMS message. Declaration public event SmsProvider.SmsReceivedHandler SmsReceived Event Type Type Description SmsProvider.SmsReceivedHandler SmsStatusReceived Event raised when the module receives a new SMS message. Declaration public event SmsProvider.SmsStatusReceivedHandler SmsStatusReceived Event Type Type Description SmsProvider.SmsStatusReceivedHandler Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.PowerOnAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.PowerOnAsyncResult.html",
    "title": "Class PowerOnAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class PowerOnAsyncResult An asynchronous result object returning the result of a Power on sequence execution Inheritance System.Object DeviceAsyncResult PowerOnAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class PowerOnAsyncResult : DeviceAsyncResult, IAsyncResult Constructors PowerOnAsyncResult(AsyncCallback, Object) Declaration public PowerOnAsyncResult(AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.AsyncCallback asyncCallback System.Object asyncState Fields Result Result of power sequence execution Declaration public PowerStatus Result Field Value Type Description PowerStatus Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public PowerStatus End() Returns Type Description PowerStatus Returns the result of the power on sequence Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.MmsMessage.html": {
    "href": "api/Eclo.nF.SIM800H.MmsMessage.html",
    "title": "Class MmsMessage | Eclo SIM800H IoT driver documentation",
    "keywords": "Class MmsMessage Class with MMS (Multimedia Messaging Service) message properties and content. Inheritance System.Object MmsMessage Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class MmsMessage Constructors MmsMessage(Byte[], String) Instantiates a new MMS message with the given parameters. Declaration public MmsMessage(byte[] image, string title = null) Parameters Type Name Description System.Byte [] image Message image. System.String title Message title. Optional. Set to null if not used. MmsMessage(String) Instantiates a new MMS message with the given parameters. Declaration public MmsMessage(string title = null) Parameters Type Name Description System.String title Message title. Optional. Set to null if not used. MmsMessage(String, Byte[], String) Instantiates a new MMS message with the given parameters. Declaration public MmsMessage(string text = null, byte[] image = null, string title = null) Parameters Type Name Description System.String text Message content. System.Byte [] image Message image. System.String title Message title. Optional. Set to null if not used. MmsMessage(String, String) Instantiates a new MMS message with the given parameters. Declaration public MmsMessage(string text, string title = null) Parameters Type Name Description System.String text Message content. System.String title Message title. Optional. Set to null if not used. Properties Image Image content to be included in the message. Declaration public byte[] Image { get; } Property Value Type Description System.Byte [] Text Text content to be included in the message. Declaration public string Text { get; } Property Value Type Description System.String Title Message title Declaration public string Title { get; } Property Value Type Description System.String"
  },
  "api/Eclo.nF.SIM800H.SmsProvider.SmsStatusReceivedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SmsProvider.SmsStatusReceivedHandler.html",
    "title": "Delegate SmsProvider.SmsStatusReceivedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SmsProvider.SmsStatusReceivedHandler Represents the delegate used for the SmsStatusReceived event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SmsStatusReceivedHandler(MessageStatusReport status); Parameters Type Name Description MessageStatusReport status Status report for SMS message that has arrived"
  },
  "api/Eclo.nF.SIM800H.SIM800H.CallReadyHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.CallReadyHandler.html",
    "title": "Delegate SIM800H.CallReadyHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.CallReadyHandler Represents the delegate used for the CallReady event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void CallReadyHandler();"
  },
  "api/Eclo.nF.SIM800H.PowerStatus.html": {
    "href": "api/Eclo.nF.SIM800H.PowerStatus.html",
    "title": "Enum PowerStatus | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum PowerStatus Possible power status Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum PowerStatus Fields Name Description FlightMode Device is in flight mode Minimum Device is workgin with minimum functionality Off Device is off On Device is on PowerOnSequenceIsRunning Power on sequence is running Unknown Unknown power state"
  },
  "api/Eclo.nF.SIM800H.OpenBearerResult.html": {
    "href": "api/Eclo.nF.SIM800H.OpenBearerResult.html",
    "title": "Enum OpenBearerResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum OpenBearerResult Outcome of request to open bearer context Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum OpenBearerResult Fields Name Description AlreadyOpen Bearer context is already open DeviceIsOff Device is off Error Unspecified error when trying to open context Failed Failed to open bearer context after all attempts NotRegisteredAtGprsNetwork Device is not registered at GPRS network NotRegisteredAtGsmNetwork Device is not registered at GSM network Open Bearer context open"
  },
  "api/Eclo.nF.SIM800H.MessageStatusReport.html": {
    "href": "api/Eclo.nF.SIM800H.MessageStatusReport.html",
    "title": "Class MessageStatusReport | Eclo SIM800H IoT driver documentation",
    "keywords": "Class MessageStatusReport Class with message status report Inheritance System.Object MessageStatusReport Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class MessageStatusReport Properties DelieveredTimeStamp Declaration public DateTime DelieveredTimeStamp { get; set; } Property Value Type Description System.DateTime FO Declaration public int FO { get; set; } Property Value Type Description System.Int32 MessageReference Declaration public int MessageReference { get; set; } Property Value Type Description System.Int32 ReceivingNumber Declaration public string ReceivingNumber { get; set; } Property Value Type Description System.String ServiceCenterTimeStamp Declaration public DateTime ServiceCenterTimeStamp { get; set; } Property Value Type Description System.DateTime ST Declaration public int ST { get; set; } Property Value Type Description System.Int32 TORA Declaration public int TORA { get; set; } Property Value Type Description System.Int32"
  },
  "api/Eclo.nF.SIM800H.HttpWebResponse.html": {
    "href": "api/Eclo.nF.SIM800H.HttpWebResponse.html",
    "title": "Class HttpWebResponse | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpWebResponse Handles retrieval of HTTP Response headers, and handles data reads. Inheritance System.Object HttpWebResponse Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpWebResponse : IDisposable Remarks Implementation follows .NETMF System.Net.HttpWebResponse Properties BodyData Body data, if any, received from the request execution. It's null or empty if the request was performed with the option of not reading the response data. Declaration public string BodyData { get; } Property Value Type Description System.String Headers Headers collection received from the request response. It's empty if the request was performed with the option of not reading the response headers. Declaration public WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection RequestSuccessful True if the request was successfully executed. Declaration public bool RequestSuccessful { get; } Property Value Type Description System.Boolean StatusCode HttpStatusCode of the request response Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode Methods Close() Declaration public void Close() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() GetResponseStream() Declaration public InMemoryRandomAccessStream GetResponseStream() Returns Type Description InMemoryRandomAccessStream Explicit Interface Implementations IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.HttpCurrentStatus.html": {
    "href": "api/Eclo.nF.SIM800H.HttpCurrentStatus.html",
    "title": "Class HttpCurrentStatus | Eclo SIM800H IoT driver documentation",
    "keywords": "Class HttpCurrentStatus Current status of HTTP service Inheritance System.Object HttpCurrentStatus Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class HttpCurrentStatus"
  },
  "api/Eclo.nF.SIM800H.GprsSocket.SocketConnectedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.GprsSocket.SocketConnectedHandler.html",
    "title": "Delegate GprsSocket.SocketConnectedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate GprsSocket.SocketConnectedHandler Represents the delegate used for the OnSocketConnected(GprsSocket) event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SocketConnectedHandler(GprsSocket sender); Parameters Type Name Description GprsSocket sender The object that raised the event."
  },
  "api/Eclo.nF.SIM800H.AtCommandResult.html": {
    "href": "api/Eclo.nF.SIM800H.AtCommandResult.html",
    "title": "Class AtCommandResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class AtCommandResult Result of the execution of an AT command. Inheritance System.Object AtCommandResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class AtCommandResult Constructors AtCommandResult(ReturnedState) Declaration public AtCommandResult(ReturnedState state) Parameters Type Name Description ReturnedState state AtCommandResult(ReturnedState, String) Declaration public AtCommandResult(ReturnedState state, string response) Parameters Type Name Description ReturnedState state System.String response Properties Response Declaration public string Response { get; } Property Value Type Description System.String Result Declaration public ReturnedState Result { get; } Property Value Type Description ReturnedState"
  },
  "api/Eclo.nF.SIM800H.BearerProfile.html": {
    "href": "api/Eclo.nF.SIM800H.BearerProfile.html",
    "title": "Enum BearerProfile | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum BearerProfile Bearer Profiles for GPRS context Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum BearerProfile Fields Name Description IpAppsBearer IP apps bearer MmsBearer MMS bearer None Invalid bearer SocketsBearer Sockets bearer"
  },
  "api/Eclo.nF.SIM800H.WebHeaderCollection.html": {
    "href": "api/Eclo.nF.SIM800H.WebHeaderCollection.html",
    "title": "Class WebHeaderCollection | Eclo SIM800H IoT driver documentation",
    "keywords": "Class WebHeaderCollection Contains protocol headers associated with a request or response. Manages name-value pairs for HTTP headers. Inheritance System.Object WebHeaderCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class WebHeaderCollection Remarks This class includes additional methods, including HTTP parsing of a collection into a buffer that can be sent. Headers are validated when attempting to add them. Implementation follows .NETMF System.Net.WebHeaderCollection Constructors WebHeaderCollection() Creates an empty collection of WEB headers. Declaration public WebHeaderCollection() Properties AllKeys Gets all header names (keys) in the collection. Declaration public string[] AllKeys { get; } Property Value Type Description System.String [] An array of type String containing all header names in a Web request. Count Gets the number of headers in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 An Int32 indicating the number of headers in a request. Item[String] Returns the string value for the header. Declaration public string this[string header] { get; } Parameters Type Name Description System.String header The name of the header. Property Value Type Description System.String A string containing the value. If no value is present, returns null . Methods Add(String, String) Inserts a header with the specified name and value into the collection. Declaration public void Add(string name, string value) Parameters Type Name Description System.String name The name of the header that is being added to the collection. System.String value The content of the header that is being added (its header-value). If a header with the specified name already exists, this value is concatenated onto the existing header. Remarks If a header with the specified name already exists, the header that is being added is concatenated onto the existing header. Throws an exception if the specified header name is the name of a special header. GetValues(String) Returns the values for the specified header name. Declaration public string[] GetValues(string header) Parameters Type Name Description System.String header The name of the header. Returns Type Description System.String [] An array of parsed string objects. Remarks Takes a header name and returns a string array representing the individual values for that header. For example, if the headers contain the following line: Accept: text/plain, text/html then GetValues(\"Accept\") returns an array of two strings: \"text/plain\" and \"text/html\". Remove(String) Removes the specified header from the collection. Declaration public void Remove(string name) Parameters Type Name Description System.String name The name of the header to remove. Remarks Throws an exception if the specified header name is the name of a special header."
  },
  "api/Eclo.nF.SIM800H.GprsSocket.DataReceivedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.GprsSocket.DataReceivedHandler.html",
    "title": "Delegate GprsSocket.DataReceivedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate GprsSocket.DataReceivedHandler Represents the delegate used for the Eclo.nF.SIM800H.GprsSocket.OnDataReceived(System.Object) event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void DataReceivedHandler(object sender); Parameters Type Name Description System.Object sender The object that raised the event."
  },
  "api/Eclo.nF.SIM800H.FileStorage.html": {
    "href": "api/Eclo.nF.SIM800H.FileStorage.html",
    "title": "Class FileStorage | Eclo SIM800H IoT driver documentation",
    "keywords": "Class FileStorage Class with methods to use internal flash storage space. Inheritance System.Object FileStorage Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class FileStorage : IDisposable Methods CreateFile(String) Create an empty file in the file storage Declaration public bool CreateFile(string fileName) Parameters Type Name Description System.String fileName File name including full path. Returns Type Description System.Boolean True when file was successfully created. False otherwise. DeleteFile(String) Deletes a file from the file storage Declaration public bool DeleteFile(string fileName) Parameters Type Name Description System.String fileName File name including full path. Returns Type Description System.Boolean True if the file was successfully deleted. False otherwise. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetAvailableStorage() Returns available storage space. Declaration public int GetAvailableStorage() Returns Type Description System.Int32 File available storage space in bytes or -1 if size couldn't be determined. GetFileSize(String) Returns the file size in bytes. Declaration public int GetFileSize(string fileName) Parameters Type Name Description System.String fileName File name including full path. Returns Type Description System.Int32 File size in bytes or -1 if size couldn't be read or doesn't exist. ReadFile(String) Read a file from the file storage Declaration public string ReadFile(string fileName) Parameters Type Name Description System.String fileName File name including full path. Returns Type Description System.String File contents or NULL if file is empty or doesn't exist. WriteFile(String, String) Writes content to a storage file. Content must be plain string without \\r \\n chars. Declaration public bool WriteFile(string fileName, string content) Parameters Type Name Description System.String fileName File name including full path. System.String content File content. Returns Type Description System.Boolean True if file was successfully written. False otherwise. Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.html": {
    "href": "api/Eclo.nF.SIM800H.html",
    "title": "Namespace Eclo.nF.SIM800H | Eclo SIM800H IoT driver documentation",
    "keywords": "Namespace Eclo.nF.SIM800H Classes AccessPointConfiguration Configuration of GPRS access point (APN). AtCommandResult Result of the execution of an AT command. ConnectGprsAsyncResult An asynchronous result returning the result of a request to open a GPRS connection DeviceAsyncResult An asynchronous result object FileStorage Class with methods to use internal flash storage space. GprsProvider Class with methods to perform GPRS related actions. GprsSocket GPRS socket instance. HttpActionResult Class with the result of an HttpAction request. HttpClient Class with methods to perform HTTP client requests. HttpCurrentStatus Current status of HTTP service HttpKnownHeaderNames Contains known HTTP header names. HttpWebRequest Provides an HTTP-specific implementation of the WebRequest class. HttpWebRequestAsyncResult An asynchronous result object returning the result of an HTTP Request HttpWebResponse Handles retrieval of HTTP Response headers, and handles data reads. ListTextMessagesAsyncResult An asynchronous result object returning a list of text message indexes LocationAndTime Class with information about location and time. MessageStatusReport Class with message status report MmsClient Class with methods to perform MMS related actions. MmsConfiguration Configuration of MMS center (MMSC). MmsMessage Class with MMS (Multimedia Messaging Service) message properties and content. OpenBearerAsyncResult An asynchronous result object returning the result of a request to open a bearer in GPRS context PowerOnAsyncResult An asynchronous result object returning the result of a Power on sequence execution SendMmsMessageAsyncResult An asynchronous result object returning the outcome of an attempt to send a MMS message. SendTextMessageAsyncResult An asynchronous result object returning the result of an attempt to send an SMS SIM800H Class with methods, properties and events to work with a SIM800H module. SmsProvider SMS client class with methods to send and read SMSs. SntpClient SNTP client class with all methods to perform SNTP requests. SocketException SyncNetworkTimeAsyncResult An asynchronous result object returning the result of a request to open a bearer in GPRS context TextMessage Class with text message (SMS) properties and content. Uri Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI. WebHeaderCollection Contains protocol headers associated with a request or response. Manages name-value pairs for HTTP headers. WebRequest Makes a request to a Uniform Resource Identifier (URI). This is an abstract class. Enums BearerProfile Bearer Profiles for GPRS context ConnectGprsResult Outcome of request to open GPRS connection ConnectionStatus Connection status of GPRS socket. See SIM800H documentation. HttpAction HTTP action method HttpStatusCode Contains the values of status codes defined for HTTP. MessageDeleteOption Available options to delete text messages MessageState Possible states for a text message NetworkRegistrationState Possible states of network registration OpenBearerResult Outcome of request to open bearer context PhoneFuncionality Phone Funcionality PinState Possible states of the SIM card PowerStatus Possible power status ProtocolType Specifies the protocols that the GprsSocket class supports. ReturnedState Possible returned states by methods SignalStrength Possible values of the strength of a signal SimCardStatus Possible SIM card status SocketError Defines socket error constants. SyncResult Result of SNTP sync request WarningCondition Warning conditions Delegates GprsProvider.GprsIpAppsBearerStateChangedHandler Represents the delegate used for the GprsIpAppsBearerStateChanged event. GprsProvider.GprsSocketsBearerStateChangedHandler Represents the delegate used for the GprsSocketsBearerStateChanged event. GprsProvider.MmsBearerStateChangedHandler Represents the delegate used for the MmsBearerStateChanged event. GprsSocket.DataReceivedHandler Represents the delegate used for the Eclo.nF.SIM800H.GprsSocket.OnDataReceived(System.Object) event. GprsSocket.SocketClosedHandler Represents the delegate used for the OnSocketClosed(GprsSocket) event. GprsSocket.SocketConnectedHandler Represents the delegate used for the OnSocketConnected(GprsSocket) event. HttpClient.HttpActionReceivedHandler Represents the delegate used for the HttpActionReceived event. SIM800H.CallReadyHandler Represents the delegate used for the CallReady event. SIM800H.GprsNetworkRegistrationChangedHandler Represents the delegate used for the GprsNetworkRegistrationChanged event. SIM800H.GsmNetworkRegistrationChangedHandler Represents the delegate used for the GsmNetworkRegistrationChanged event. SIM800H.PowerStatusChangedHandler Represents the delegate used for the PowerStatusChanged event. SIM800H.SimCardStatusChangedHandler Represents the delegate used for the SimCardStatusChanged event. SIM800H.SmsReadyHandler Represents the delegate used for the SmsReady event. SIM800H.SmsSentReferenceReceivedHandler Represents the delegate used for the SmsSentReferenceReceived event. SIM800H.WarningConditionTriggeredHandler Represents the delegate used for the WarningConditionTriggered event. SmsProvider.SmsReceivedHandler Represents the delegate used for the SmsReceived event. SmsProvider.SmsStatusReceivedHandler Represents the delegate used for the SmsStatusReceived event. SntpClient.SntpReplyReceivedHandler Represents the delegate used for the SntpReplyReceived event."
  },
  "api/Eclo.nF.SIM800H.WebRequest.html": {
    "href": "api/Eclo.nF.SIM800H.WebRequest.html",
    "title": "Class WebRequest | Eclo SIM800H IoT driver documentation",
    "keywords": "Class WebRequest Makes a request to a Uniform Resource Identifier (URI). This is an abstract class. Inheritance System.Object WebRequest HttpWebRequest Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public abstract class WebRequest : IDisposable Remarks This is the base class of all Web resource/protocol objects. This class provides common methods, data and properties for making the top-level request. Implementation follows .NETMF System.Net.WebRequest Constructors WebRequest() Initializes a new instance of the WebRequest class. Declaration protected WebRequest() Properties UserAgent Gets or sets the value of the User-Agent HTTP header. Declaration public string UserAgent { get; set; } Property Value Type Description System.String The value of the User-agent HTTP header. The default value is null . Methods Create(Uri) Creates a WebRequest . Declaration public static WebRequest Create(Uri requestUri) Parameters Type Name Description Uri requestUri A Uri containing the URI of the requested resource. Returns Type Description WebRequest Remarks This is the main creation routine. The specified Uri is looked up in the prefix match table, and the appropriate handler is invoked to create the object. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.SmsProvider.SmsReceivedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SmsProvider.SmsReceivedHandler.html",
    "title": "Delegate SmsProvider.SmsReceivedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SmsProvider.SmsReceivedHandler Represents the delegate used for the SmsReceived event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SmsReceivedHandler(byte messageIndex); Parameters Type Name Description System.Byte messageIndex Position index of the SMS message that has arrived"
  },
  "api/Eclo.nF.SIM800H.SimCardStatus.html": {
    "href": "api/Eclo.nF.SIM800H.SimCardStatus.html",
    "title": "Enum SimCardStatus | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum SimCardStatus Possible SIM card status Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum SimCardStatus Fields Name Description Inserted SIM Card inserted Removed Removed Unknown Unknown SIM card status"
  },
  "api/Eclo.nF.SIM800H.SignalStrength.html": {
    "href": "api/Eclo.nF.SIM800H.SignalStrength.html",
    "title": "Enum SignalStrength | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum SignalStrength Possible values of the strength of a signal Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum SignalStrength Fields Name Description Error Error in the response from the GSM Module Strong -110 to -54dBm Unknown Not known or undetectable VeryStrong -52dBm or greater VeryWeak -115dBm or less Weak -111dBm"
  },
  "api/Eclo.nF.SIM800H.Uri.html": {
    "href": "api/Eclo.nF.SIM800H.Uri.html",
    "title": "Class Uri | Eclo SIM800H IoT driver documentation",
    "keywords": "Class Uri Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI. Inheritance System.Object Uri Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class Uri Remarks Implementation follows .NETMF System.Uri Constructors Uri(String) Declaration public Uri(string uriString) Parameters Type Name Description System.String uriString Fields m_AbsolutePath Declaration protected string m_AbsolutePath Field Value Type Description System.String m_absoluteUri Declaration protected string m_absoluteUri Field Value Type Description System.String m_host Declaration protected string m_host Field Value Type Description System.String m_OriginalUriString Declaration protected string m_OriginalUriString Field Value Type Description System.String m_port Declaration protected int m_port Field Value Type Description System.Int32 m_scheme Declaration protected string m_scheme Field Value Type Description System.String Properties AbsolutePath Declaration public string AbsolutePath { get; } Property Value Type Description System.String AbsoluteUri Declaration public string AbsoluteUri { get; } Property Value Type Description System.String Host Declaration public string Host { get; } Property Value Type Description System.String OriginalString Declaration public string OriginalString { get; } Property Value Type Description System.String Port Declaration public int Port { get; } Property Value Type Description System.Int32 Scheme Declaration public string Scheme { get; } Property Value Type Description System.String Methods ConstructAbsoluteUri(String) Declaration protected void ConstructAbsoluteUri(string uriString) Parameters Type Name Description System.String uriString ParseSchemeSpecificPart(String, Int32) Declaration protected bool ParseSchemeSpecificPart(string sUri, int iStart) Parameters Type Name Description System.String sUri System.Int32 iStart Returns Type Description System.Boolean ParseUriString(String) Declaration protected void ParseUriString(string uriString) Parameters Type Name Description System.String uriString Split(String, Int32, out String, out String, Boolean) Declaration protected void Split(string sUri, int iStart, out string sAuthority, out string sPath, bool bReplaceEmptyPath) Parameters Type Name Description System.String sUri System.Int32 iStart System.String sAuthority System.String sPath System.Boolean bReplaceEmptyPath"
  },
  "api/Eclo.nF.SIM800H.SntpClient.html": {
    "href": "api/Eclo.nF.SIM800H.SntpClient.html",
    "title": "Class SntpClient | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SntpClient SNTP client class with all methods to perform SNTP requests. Inheritance System.Object SntpClient Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class SntpClient : IDisposable Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() SyncNetworkTimeAsync(String, TimeSpan, AsyncCallback, Object) Starts an asynchronous operation to synchronize network time with SNTP server. Requires GPRS bearer profile 1 opened. Declaration public SyncNetworkTimeAsyncResult SyncNetworkTimeAsync(string sntpServer, TimeSpan utcOffset, AsyncCallback asyncCallback = null, object asyncState = null) Parameters Type Name Description System.String sntpServer URL or IP address of the NTP server System.TimeSpan utcOffset UTC offset of local time zone. System.AsyncCallback asyncCallback The callback to be invoked upon completion, optional System.Object asyncState The state object to be stored against the OpenGprsContextAsyncResult, optional Returns Type Description SyncNetworkTimeAsyncResult The IMEIAsyncResult Events SntpReplyReceived Event raised when the module receives the reply of a SNTP sync request. Declaration public event SntpClient.SntpReplyReceivedHandler SntpReplyReceived Event Type Type Description SntpClient.SntpReplyReceivedHandler Implements System.IDisposable"
  },
  "api/Eclo.nF.SIM800H.SIM800H.SmsSentReferenceReceivedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.SmsSentReferenceReceivedHandler.html",
    "title": "Delegate SIM800H.SmsSentReferenceReceivedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.SmsSentReferenceReceivedHandler Represents the delegate used for the SmsSentReferenceReceived event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void SmsSentReferenceReceivedHandler(int reference); Parameters Type Name Description System.Int32 reference reference of the Sms sent"
  },
  "api/Eclo.nF.SIM800H.AccessPointConfiguration.html": {
    "href": "api/Eclo.nF.SIM800H.AccessPointConfiguration.html",
    "title": "Class AccessPointConfiguration | Eclo SIM800H IoT driver documentation",
    "keywords": "Class AccessPointConfiguration Configuration of GPRS access point (APN). Inheritance System.Object AccessPointConfiguration Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class AccessPointConfiguration Constructors AccessPointConfiguration() Empty GPRS bearer Access Point configuration. Declaration public AccessPointConfiguration() AccessPointConfiguration(String) GPRS bearer Access Point configuration. Declaration public AccessPointConfiguration(string apn) Parameters Type Name Description System.String apn Access Point name AccessPointConfiguration(String, String, String) GPRS bearer Access Point configuration. Declaration public AccessPointConfiguration(string apn, string userName, string password) Parameters Type Name Description System.String apn Access Point name System.String userName User name System.String password Password. Properties AccessPointName Access Point name. Can't be null Declaration public string AccessPointName { get; } Property Value Type Description System.String Password Password. Null if not used. Declaration public string Password { get; } Property Value Type Description System.String UserName User name. Null if not used. Declaration public string UserName { get; } Property Value Type Description System.String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Parse(String) Parse a string with a valid Access Point configuration. Expected format is \"apname|user|password\". User name and password are optional. Declaration public static AccessPointConfiguration Parse(string s) Parameters Type Name Description System.String s String to be parsed in the format: \"apname|user|password\". Returns Type Description AccessPointConfiguration A new instance of AccessPointConfiguration with valid access point configuration ToString() String with representation of Access Point configuration in format \"apname|user|password\". If user and password are empty they won't be included in the configuration string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators Equality(AccessPointConfiguration, AccessPointConfiguration) Declaration public static bool operator ==(AccessPointConfiguration value1, AccessPointConfiguration value2) Parameters Type Name Description AccessPointConfiguration value1 AccessPointConfiguration value2 Returns Type Description System.Boolean Inequality(AccessPointConfiguration, AccessPointConfiguration) Declaration public static bool operator !=(AccessPointConfiguration value1, AccessPointConfiguration value2) Parameters Type Name Description AccessPointConfiguration value1 AccessPointConfiguration value2 Returns Type Description System.Boolean"
  },
  "api/Eclo.nF.SIM800H.SyncNetworkTimeAsyncResult.html": {
    "href": "api/Eclo.nF.SIM800H.SyncNetworkTimeAsyncResult.html",
    "title": "Class SyncNetworkTimeAsyncResult | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SyncNetworkTimeAsyncResult An asynchronous result object returning the result of a request to open a bearer in GPRS context Inheritance System.Object DeviceAsyncResult SyncNetworkTimeAsyncResult Implements System.IAsyncResult Inherited Members DeviceAsyncResult.AsyncState DeviceAsyncResult.CompletedSynchronously DeviceAsyncResult.IsCompleted DeviceAsyncResult.AsyncWaitHandle DeviceAsyncResult.Complete(Exception, Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public class SyncNetworkTimeAsyncResult : DeviceAsyncResult, IAsyncResult Fields Result Result of SNTP sync operation Declaration public SyncResult Result Field Value Type Description SyncResult Methods End() Finishes the asynchronous processing and throws an exception if one was generated Blocks until the asynchronous processing has completed Declaration public SyncResult End() Returns Type Description SyncResult Returns the result of the request to open bearer context Process() The method used to perform the asynchronous processing Declaration public override void Process() Overrides DeviceAsyncResult.Process() Implements System.IAsyncResult"
  },
  "api/Eclo.nF.SIM800H.SocketException.html": {
    "href": "api/Eclo.nF.SIM800H.SocketException.html",
    "title": "Class SocketException | Eclo SIM800H IoT driver documentation",
    "keywords": "Class SocketException Inheritance System.Object System.Exception SocketException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax [Serializable] public class SocketException : Exception, ISerializable, _Exception Remarks Implementation follows .NETMF System.Net.Sockets.SocketException Constructors SocketException(SocketError) Declaration public SocketException(SocketError errorCode) Parameters Type Name Description SocketError errorCode Properties ErrorCode Declaration public int ErrorCode { get; } Property Value Type Description System.Int32 Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Eclo.nF.SIM800H.SIM800H.GsmNetworkRegistrationChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.GsmNetworkRegistrationChangedHandler.html",
    "title": "Delegate SIM800H.GsmNetworkRegistrationChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.GsmNetworkRegistrationChangedHandler Represents the delegate used for the GsmNetworkRegistrationChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void GsmNetworkRegistrationChangedHandler(NetworkRegistrationState networkState); Parameters Type Name Description NetworkRegistrationState networkState Current state of the GSM network registration"
  },
  "api/Eclo.nF.SIM800H.SIM800H.GprsNetworkRegistrationChangedHandler.html": {
    "href": "api/Eclo.nF.SIM800H.SIM800H.GprsNetworkRegistrationChangedHandler.html",
    "title": "Delegate SIM800H.GprsNetworkRegistrationChangedHandler | Eclo SIM800H IoT driver documentation",
    "keywords": "Delegate SIM800H.GprsNetworkRegistrationChangedHandler Represents the delegate used for the GprsNetworkRegistrationChanged event. Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public delegate void GprsNetworkRegistrationChangedHandler(NetworkRegistrationState networkState); Parameters Type Name Description NetworkRegistrationState networkState Current state of the GPRS network registration"
  },
  "api/Eclo.nF.SIM800H.ReturnedState.html": {
    "href": "api/Eclo.nF.SIM800H.ReturnedState.html",
    "title": "Enum ReturnedState | Eclo SIM800H IoT driver documentation",
    "keywords": "Enum ReturnedState Possible returned states by methods Namespace : Eclo.nF.SIM800H Assembly : cs.temp.dll.dll Syntax public enum ReturnedState Fields Name Description DeviceIsBusy Device is busy DeviceIsOff Device is off Error Error in the operation. See method documentation. InvalidCommand Command syntax is incorrect NoReply No reply returned OK Operation successful"
  }
}